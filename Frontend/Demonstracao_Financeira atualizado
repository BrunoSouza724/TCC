import streamlit as st
import pandas as pd
import datetime
import sqlite3

def conectar_banco():
    return sqlite3.connect('Lancamentos.db')

def excluir_lancamento(lancamento_id):
    try:
        conn = conectar_banco()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM Lancamentos WHERE id = ?", (lancamento_id,))
        conn.commit()
        st.success(f"Lan√ßamento {lancamento_id} removido com sucesso.")
    except Exception as e:
        st.error(f"Erro ao excluir lan√ßamento: {e}")
    finally:
        conn.close()

def atualizar_lancamento(lancamento_id, novo_valor, nova_quantidade):
    try:
        conn = conectar_banco()
        cursor = conn.cursor()
        cursor.execute("UPDATE Lancamentos SET Valor = ?, Quantidade = ? WHERE id = ?", (novo_valor, nova_quantidade, lancamento_id))
        conn.commit()
        st.success(f"Lan√ßamento {lancamento_id} atualizado.")
    except Exception as e:
        st.error(f"Erro ao atualizar: {e}")
    finally:
        conn.close()

def buscar_dados(start_date, end_date, dado_selecionado, tipo_transacao):
    if dado_selecionado == "Todos":
        descricao_filter = ""
    else:
        descricao_filter = f"AND Descricao = '{dado_selecionado}'"

    if tipo_transacao == "Ambas":
        query = f"""
            SELECT id, Tipo, Data, Descricao, Quantidade, Valor, (Quantidade * Valor) as ValorTotal, Metodo
            FROM Lancamentos
            WHERE Data BETWEEN '{start_date}' AND '{end_date}'
            {descricao_filter}
        """
    else:
        query = f"""
            SELECT id, Tipo, Data, Descricao, Quantidade, Valor, (Quantidade * Valor) as ValorTotal, Metodo
            FROM Lancamentos
            WHERE Data BETWEEN '{start_date}' AND '{end_date}'
            {descricao_filter}
            AND Tipo = '{tipo_transacao}'
        """

    conn = conectar_banco()
    try:
        df = pd.read_sql_query(query, conn)
    except Exception as e:
        st.error(f"Erro na consulta: {e}")
        df = pd.DataFrame()
    finally:
        conn.close()

    return df

def main():
    st.sidebar.image('Logo.png')
    st.sidebar.title('Seja-Bem Vindo ao Controle Financeiro :heavy_dollar_sign:')

    st.title(":page_facing_up: Relat√≥rios Financeiros")

    if "modo_edicao" not in st.session_state:
        st.session_state.modo_edicao = False
    if "df_resultado" not in st.session_state:
        st.session_state.df_resultado = pd.DataFrame()
    if "confirmacoes" not in st.session_state:
        st.session_state.confirmacoes = {}
    if "novos_valores" not in st.session_state:
        st.session_state.novos_valores = {}
    if "novas_quantidades" not in st.session_state:
        st.session_state.novas_quantidades = {}

    data, descricao, entrada_saida = st.columns(3)

    with data:
        periodo_selecionado = st.date_input(
            "Data",
            value=(datetime.date(2025, 1, 1), datetime.date(2025, 1, 20))
        )
        if isinstance(periodo_selecionado, tuple) and len(periodo_selecionado) == 2:
            start_date, end_date = periodo_selecionado
        else:
            start_date = periodo_selecionado
            end_date = periodo_selecionado

    with descricao:
        conn = conectar_banco()
        try:
            df_descricoes = pd.read_sql_query("SELECT DISTINCT Descricao FROM Lancamentos", conn)
            opcoes_dados = ["Todos"] + df_descricoes["Descricao"].tolist() if not df_descricoes.empty else ["Nenhuma op√ß√£o dispon√≠vel"]
        except Exception as e:
            st.error(f"Erro ao obter descri√ß√µes: {e}")
            opcoes_dados = ["Erro ao carregar"]
        finally:
            conn.close()

        dado_selecionado = st.selectbox("Selecione a Descri√ß√£o", opcoes_dados)

    with entrada_saida:
        tipo_transacao = st.radio("Entrada, Sa√≠da ou Ambas", ("Entrada", "Sa√≠da", "Ambas"))

    if st.button("Buscar Dados"):
        df = buscar_dados(start_date, end_date, dado_selecionado, tipo_transacao)
        if not df.empty:
            st.session_state.df_resultado = df
            st.session_state.novos_valores = {}
            st.session_state.novas_quantidades = {}
        else:
            st.info("Nenhum dado retornado ou erro na consulta.")
            st.session_state.df_resultado = pd.DataFrame()

    if not st.session_state.df_resultado.empty:
        col_titulo, col_botao = st.columns([7, 2])
        with col_titulo:
            st.subheader("Resultados da Consulta")
        with col_botao:
            if not st.session_state.modo_edicao:
                if st.button("‚úèÔ∏è Editar"):
                    st.session_state.modo_edicao = True
                    st.rerun()
            else:
                if st.button("üîô Voltar"):
                    st.session_state.modo_edicao = False
                    df_atualizado = buscar_dados(start_date, end_date, dado_selecionado, tipo_transacao)
                    st.session_state.df_resultado = df_atualizado
                    st.rerun()

        if not st.session_state.modo_edicao:
            df_mostrar = st.session_state.df_resultado.copy()
            df_mostrar = df_mostrar[["Descricao", "Tipo", "Data", "Quantidade", "Valor", "ValorTotal", "Metodo"]]
            df_mostrar.rename(columns={
                "Descricao": "Descri√ß√£o",
                "Tipo": "Tipo",
                "Data": "Data",
                "Quantidade": "Quantidade",
                "Valor": "Valor Unit√°rio",
                "ValorTotal": "Valor Total",
                "Metodo": "M√©todo"
            }, inplace=True)
            df_mostrar.reset_index(drop=True, inplace=True)
            st.dataframe(df_mostrar)

    if st.session_state.modo_edicao:
        st.subheader("Editar Lan√ßamentos")
        for index, row in st.session_state.df_resultado.iterrows():
            with st.container():
                col1, col2, col3, col4 = st.columns([5, 2, 2, 1])
                with col1:
                    st.markdown(
                        f"**Descri√ß√£o:** {row['Descricao']} | **Tipo:** {row['Tipo']} | "
                        f"**Data:** {row['Data']} | **M√©todo:** {row['Metodo']}"
                    )
                with col2:  # Quantidade antes
                    quantidade_valor = int(row['Quantidade']) if pd.notna(row['Quantidade']) else 0
                    quantidade = st.number_input(
                        "Quantidade", min_value=0, step=1, value=quantidade_valor, key=f"quant_{row['id']}"
                    )
                    st.session_state.novas_quantidades[row['id']] = quantidade
                with col3:  # Valor unit√°rio depois
                    novo_valor_str = st.text_input(
                        "Valor Unit√°rio (R$)", 
                        value=f"{float(row['Valor']):.2f}", 
                        key=f"valor_{row['id']}"
                    )
                    try:
                        novo_valor = float(novo_valor_str.replace(',', '.'))
                    except ValueError:
                        novo_valor = float(row['Valor'])
                    st.session_state.novos_valores[row['id']] = novo_valor
                with col4:
                    if not st.session_state.confirmacoes.get(row['id'], False):
                        if st.button("üóëÔ∏è", key=f"remover_{row['id']}"):
                            st.session_state.confirmacoes[row['id']] = True
                            st.rerun()

            valor_total = st.session_state.novos_valores[row['id']] * st.session_state.novas_quantidades[row['id']]
            st.write(f"**Valor Total:** R$ {valor_total:.2f}")

            if st.session_state.confirmacoes.get(row['id'], False):
                confirm_col1, confirm_col2, confirm_col3 = st.columns([0.3, 0.2, 0.2])
                with confirm_col1:
                    st.warning("Tem certeza que deseja excluir?")
                with confirm_col2:
                    if st.button("‚úÖ Sim", key=f"sim_{row['id']}"):
                        excluir_lancamento(row['id'])
                        st.session_state.df_resultado = st.session_state.df_resultado[
                            st.session_state.df_resultado['id'] != row['id']
                        ]
                        del st.session_state.confirmacoes[row['id']]
                        st.rerun()
                with confirm_col3:
                    if st.button("‚ùå Cancelar", key=f"cancelar_{row['id']}"):
                        del st.session_state.confirmacoes[row['id']]
                        st.rerun()

        if st.button("üíæ Salvar Altera√ß√µes"):
            for lancamento_id in st.session_state.novos_valores.keys():
                atualizar_lancamento(
                    lancamento_id,
                    st.session_state.novos_valores[lancamento_id],
                    st.session_state.novas_quantidades[lancamento_id]
                )
            st.success("Todos os lan√ßamentos atualizados com sucesso.")
            st.session_state.modo_edicao = False
            df_atualizado = buscar_dados(start_date, end_date, dado_selecionado, tipo_transacao)
            st.session_state.df_resultado = df_atualizado
            st.rerun()

if __name__ == "__main__":
    main()
